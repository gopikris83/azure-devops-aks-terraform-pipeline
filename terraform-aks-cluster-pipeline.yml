# Starter pipeline
# Publish the Artifacts to Pipeline
# Install the latest Terraform plugin
# Validate the Terraform manifests by 'init' and 'validate' using Terraform CLI

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
- name: TEST_ENVIRONMENT
  value: test
- group: AKS-VariableGP
- name: clientid
  value: $[variables.client_app_id]
- name: clientpwd
  value: $[variables.client_app_secret]

stages:
- stage: TerraformValidate
  jobs:
    - job: TerraformValidateJob
      continueOnError: false
      steps:
      - task: PublishPipelineArtifact@1
        displayName: Publish Artifact
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/tf-manifests'
          artifact: 'terraform-manifests-out'
          publishLocation: 'pipeline'
      - task: TerraformInstaller@0
        displayName: Terraform Install
        inputs:
          terraformVersion: 'latest'
      - task: TerraformCLI@0
        displayName: Terraform Init
        inputs:
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/tf-manifests'
          backendType: 'azurerm'
          backendServiceArm: 'terraform-aks-azurerm-svc-con'
          ensureBackend: true
          backendAzureRmResourceGroupName: 'tf-storage-rg'
          backendAzureRmResourceGroupLocation: 'West Europe'
          backendAzureRmStorageAccountName: 'terraformstore1203'
          backendAzureRmContainerName: 'tfstatefiles'
          backendAzureRmKey: 'aks-state.tfstate'
          allowTelemetryCollection: false
      - task: TerraformCLI@0
        displayName: Terraform Validate
        inputs:
          command: 'validate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/tf-manifests'
          allowTelemetryCollection: false

# Deploy the stages to Test environment
# Create Service Principal
# Define the environment using variables
# Terraform Initialize
# Terraform Plan for preview
# Terraform apply
- stage: DeployAKSServicePrincipal
  jobs:
  - job: TerraformServicePrincipalJob
    continueOnError: false
    steps:
    - task: PublishPipelineArtifact@1
      displayName: Publish Artifact
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/service-principal'
        artifact: 'terraform-manifests-sp'
        publishLocation: 'pipeline'
    - task: TerraformCLI@0
      displayName: Terraform Init
      inputs:
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/service-principal'
        backendType: 'azurerm'
        backendServiceArm: 'terraform-aks-azurerm-svc-con'
        ensureBackend: true
        backendAzureRmResourceGroupName: 'azactivedirectory-rg'
        backendAzureRmResourceGroupLocation: 'Sweden Central'
        backendAzureRmStorageAccountName: 'azadmysql2022'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'dev.terraform.state'
        allowTelemetryCollection: false
    - task: TerraformCLI@0
      displayName: Terraform Plan
      inputs:
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/service-principal'
        environmentServiceName: 'terraform-aks-azurerm-svc-con'
        commandOptions: '-out $(Pipeline.Workspace)/terraform-manifests-sp/$(TEST_ENVIRONMENT)-$(Build.BuildId).out'
        allowTelemetryCollection: false
    - task: TerraformCLI@0
      displayName: Terraform Apply
      inputs:
        command: 'apply'
        workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-sp'
        environmentServiceName: 'terraform-aks-azurerm-svc-con'
        commandOptions: '$(Pipeline.Workspace)/terraform-manifests-sp/$(TEST_ENVIRONMENT)-$(Build.BuildId).out'
        allowTelemetryCollection: false

# Deploy the stages to Test environment
# Deployment to the Test AKS Cluster
# Define the environment using variables
# Download the SSH Key to access the kubernetes cluster from local
# Terraform Initialize
# Terraform Plan for AKS Cluster preview
# Terraform apply

- stage: DeployAKSTestCluster
  jobs: 
  - deployment: DeployAKSTestCluster
    displayName: DeployAKSTestCluster
    pool:
      vmImage: 'ubuntu-latest'
    environment: $(TEST_ENVIRONMENT)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadSecureFile@1
            displayName: Download SSH Key
            name: sshkey
            inputs:
              secureFile: 'akspubkey.pub'
          - task: TerraformCLI@0
            displayName: Terraform Init
            inputs:
              command: 'init'
              workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
              backendType: 'azurerm'
              backendServiceArm: 'terraform-aks-azurerm-svc-con'
              ensureBackend: true
              backendAzureRmResourceGroupName: 'tf-storage-rg'
              backendAzureRmResourceGroupLocation: 'West Europe'
              backendAzureRmStorageAccountName: 'terraformstore1203'
              backendAzureRmContainerName: 'tfstatefiles'
              backendAzureRmKey: 'aks-$(TEST_ENVIRONMENT).tfstate'
              allowTelemetryCollection: false
          - task: TerraformCLI@0
            inputs:
              command: 'plan'
              workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
              environmentServiceName: 'terraform-aks-azurerm-svc-con'
              commandOptions: '-var ssh_pub_key=$(sshkey.secureFilePath) -var client_app_id=$(clientid) -var client_app_secret=$(clientpwd) -var environment=$(TEST_ENVIRONMENT) -out $(Pipeline.Workspace)/terraform-manifests-out/$(TEST_ENVIRONMENT)-$(Build.BuildId).out'
              allowTelemetryCollection: false
          - task: TerraformCLI@0
            inputs:
              command: 'apply'
              workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
              environmentServiceName: 'terraform-aks-azurerm-svc-con'
              commandOptions: '$(Pipeline.Workspace)/terraform-manifests-out/$(TEST_ENVIRONMENT)-$(Build.BuildId).out'
              allowTelemetryCollection: false
          - task: TerraformCLI@0
            inputs:
              command: 'destroy'
              workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
              environmentServiceName: 'terraform-aks-azurerm-svc-con'
#              commandOptions: '-var ssh_pub_key=$(sshkey.secureFilePath) -var environment=$(TEST_ENVIRONMENT) -out $(Pipeline.Workspace)/terraform-manifests-out/$(TEST_ENVIRONMENT)-$(Build.BuildId).out'
              allowTelemetryCollection: false